import { headAppend } from "./variableInjections"
import { shell } from "./configFunctions"
import { Omit } from "./types"

export interface Options {
  /**
   * Environment variables to be set for your app. Values will be used as default
   */
  envVars: { [key: string]: string | undefined }

  /**
   * key of property to be used on window object.
   * Optional.
   * Default: "CLIENT_ENV".
   */
  windowKeyName?: string

  /**
   * Variables injection function.
   * @param {string} oldHtml - string representation of current html
   * @param {string} rawVariables - string representation of variables to inject
   * @param {string} filename - filename where injection is done
   * @returns - html with injected variables
   * Optional.
   * Default: appends to 'head' tag
   */
  injectEnvVars?: typeof headAppend

  /**
   * Configuration script file name.
   * Optional.
   * Default: config-env.sh
   */
  configFileName?: string

  /** 
   * Configuration script factory function.
   * Can be either pre-defined type, e.g. 'shell'
   * or a custom function-factory with following type:
   * @param {typeof envVars} envs
   * @returns {string} - content of the script file
   * Optional.
   * Default: "shell"
   */
  configFactoryFunc?: "shell" | typeof shell

  /**
   * Key-value map, where:
   * - key - file name of generated by html-webpack-plugin html file;
   * - value - template file name for this html.
   * For every not specified html filename - template with default pattern-name will be generated.
   * Optional.
   * Default: <html-webpack-plugin-filename>.template, e.g. index.html.template
   */
  templateFileNames?: { [key: string]: string }
}

export const defaultOptions: Required<Omit<Options, "envVars">> = {
  windowKeyName: "CLIENT_ENV",
  injectEnvVars: headAppend,
  configFileName: "config-env.sh",
  configFactoryFunc: "shell",
  templateFileNames: {}
}
